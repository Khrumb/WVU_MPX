Programmer's Manual
Group 13: Government Employees
Version: R5

----------STRUCTURES----------

Process control block (PCB): 

MPX is a multiprocessing system and needs a way to handle multiple processes at the same time. We use the PCBs in a queue to keep track of what processes need to run next and hold any that have been suspended. Our process control block structure has the following parameters
- process name: name assigned to the processes must have 8 characters and room for a null character
- process class: class the process belongs too ex: application or system, type int
- priority: stored as int of value 0 to 9, determine which processes should be at the top of the queue to run next
- state: 2 variables 
	- suspended or not suspended
	- ready running or blocked
- process stack: 1024 bytes allocated with an unsigned char, must keep track of stack top and bottom
- pointer to other PCBs: doubly linked list which has pointers to the next and previous processes in the queue

Queue: 

Doubly-linked structure created in C to handle our ready queue and our blocked queue
- queue parameters: head and tail of type PCB as well as int to hold a count
- ready queue stores processes by their priority
- blocked queue stores processes in a FIFO order

Complete Memory Control Block (CMCB): 

In order to be able to manage memory in our MPX, there needs to be control blocks that act as a boundary between chunks of memory and contain information about that block. That is where CMCBs and LMCBs come in and CMCBs come before the block of memory. The CMCBs are used to tell the user what that block is, where that block of memory is, how big it is and links to the next and previous blocks of memory. The CMCBs are stored in a list structure that depicts how the blocks are stored in memory. The structure of the CMCBs are:
- type: either free or allocated
- beginning address: where the block is located in memory
- size: the size of the block in bytes
- name: name of the PCB that is housed in the block
- pointers to other blocks: linked list that has pointers to the previous and next blocks in memory

Limited Memory Control Block (LMCB): 

LMCBs are found after the CMCB and the block of memory and serve as a boundary between the CMCB of the block below it. The structure of the LMCBs are:
- type: either free or allocated
- size: the size of the block in bytes

List:

Single-linked list structure created in C to handle our free list of CMCBs and allocated list of CMCBs.
- list parameters: pointers to the head and tail CMCBs in each structure as well as an integer to count the number of CMCBs in the structure
- both free and allocated lists store CMCBs based on their beginning addresses starting with zero at the head
- free list merges adjacent free CMCBs whenever possible

----------Procedures----------
***note: procedures cannot be inside command handler***
- init_queues()
	description: calls sys_alloc_mem() to allocate  memory for both queues
	paramaters: None
	valid return: ok code
	invalid return: null (error)
- AllocatePCB()
	description: calls sys_alloc_mem() to allocate  memory for process
	paramaters: None
	valid return: pcb pointer
	invalid return: null (error)
- FreePCB()
	description: calls sys_free_mem() to free all memory associated with a given PCB
	parameters: pcb pointer
	valid return: ok code
	invalid return: error code
- setupPCB()
	description: calls allocatePCB, initializes the a pcb, sets pcb to a ready state
	parameters: process name, class, and priority
	valid return: PCB pointer
	invalid return: null for error or invalid input message
- findPCB()
	description: searches both queues for a process with the given name
	parameters: process name
	valid return: PCB pointer
	invalid return: null if PCB does not exist
- insertPCB()
	description: puts PCB into correct queue
	parameters: PCB pointer
	returns: none
- insertIntoReady()
	description: puts PCB into the blocked queue
	parameters: pointer to PCB
	returns: none
- insertIntoBlocked()
	description: puts PCB into the blocked queue
	parameters: pointer to PCB
	returns: none
- removePCB()
	description: removes PCB from queue it is currently stored in
	parameters: pointer to PCB
	valid return: confirmation message
	invalid return: null (PCB not found)
- removeFromReady()
	description: removes PCB from the ready queue
	parameters: pointer to PCB
	returns: none
- removeFromBlocked()
	description: removes PCB from the blocked queue
	parameters: pointer to PCB
	returns: none
- sys_call()
	description: prepares MPX for the next ready process to begin/resume execution
	parameters: context registers of the currently operating process
	return: u-32 int that denotes the top of the stack in memory
- InitializeHeap()
	description: creates the heap used to store all memory in the MPX
	parameters: a valid integer size
	returns: none
- AllocateMemory()
	description: allocates memory to an object as well as its CMCB and LMCB
	parameters: a size integer smaller than the remaining free memory available
	returns: a typeless pointer to the memory block created
- FreeMem()
	description: frees an already allocated block of memory to be repurposed for other use
	parameters: a typeless pointer to the memory object that needs to be freed
	returns: a boolean integer indicating success or failure to free a memory block

----------Functions----------

- itoa
	description: converts integer variable to a string
	parameters: takes in an integer value and decimal base value
	returns: a character pointer to the new string integer
- BCDtoDec 
	description: converts a BCD character to a decimal character
	parameters: takes in a character bcd
	returns: a character integer value
- DectoBCD
	description: converts a decimal character to a BCD character
	parameters: takes in an integer value
	returns: a character bcd
- formatNum
	description: converts ASCII characters to number values
	parameters: a number character
	returns: an integer
- asciiToDec
	description: converts ASCII characters to number values
	parameters: a number character
	returns: an integer
- strlen
	description: finds the length of a given string
	parameters: takes in a character string
	returns: the length of the string passed in, as int
- parseTime
	description: parses the user input and sets the internal clock if valid input is given
	parameters: character buffer from the user
	returns: a boolean integer whether the clock was set or not
- parseDate: 
	description: parses the user input and sets the internal date if valid input is given
	parameters: character buffer from the user
	returns: a boolean integer whether the date was set or not
- parseCommand
	description: parses the user's input in order to select a command
	parameters: a string (char pointer, command from the user)
	returns: the correct command is called
- printPCB
	description: prints out information about a given PCB
	parameters: a valid PCB
	returns: none
- CommandHandler 
	description: handles the user's input in the command line. Function takes in the user's raw inputs and translates them into something our program can use. Also facilitates moving around in 		command line, such as left right, carriage return etc.
	parameters: input from COM1 from buffer
	returns: correct character or action on screen
- Serial import 
	description: uses COM1 to get input from basic IO (later used by command Handler)
	parameters: input from keyboard
	returns: none
- kMain.c 
	description: initializes the following
		Global Descriptor Table 
		programmable interrupt controller 
		paging
- strcpy
	description: copies a string to create a new string which is a copy of the original
	parameters:  takes in a char pointer s1 as source and constant char pointer as dest
	returns: pointer to the destination string
- atoi: 
	description: converts a string to int        
	parameters: const char
	returns: value of char as an integer
- strcmp
	description: compares 2 string for length and returns difference
	parameters: takes in 2 strings (char pointers)
	returns: difference of strings
- init_command_history
	description: creates memory for the command history and initializes the command history
	parameter: none
	returns: none
- add_history_entry
	description: adds a new entry to the command history
	parameter: pointer to a new entry to the command history
	returns: none
- clearLine
	description: creates a new line
	parameter: none
	returns: none
- resetBuffers
	description: resets the command and argument buffers to admit another command
	parameter: none
	returns: none
- populateBuffers
	description: populates the command and argument buffers to include the next command
	parameter: the current command entry
	returns: none
- validSize
	description: determines whether the user input is a valid byte size
	parameters: an integer argument that represents the amount of bytes in memory dedicated to the MPX
	returns: an integer size or error code
- printCMCB
	description: prints out information about a given CMCB
	parameters: a valid CMCB
	returns: nothing
- reorderList
	description: reorders a given list based on the beginning addresses of the CMCBs in the list
	parameters: a list structure, either the free or allocated list
	returns: nothing
- mergeFree
	description: merges adjacent free memory blocks together to create one large block of memory
	parameters: a CMCB structure pointing to the header of the free list
	returns: nothing

----------Commands------------

- turnOff
	description: shuts down mpx machine when command is entered and y is received as a response
	parameters: takes in a char which can be y or n
	returns: shut down signal
- help
	description: shows the user what commands they have access to        
	parameters: takes in a string
	returns: list of all available commands for the user and what they do
- version
	description: command from user requesting program version
	parameters: user enters a version command	
	returns: current version
- getTime
	description: displays current system time
	parameters: getTime command issued
	returns: prints current system time
- getDate
	description: displays current system date
	parameters: getDate command issued
	returns: prints current system date
- setTime
	description: allows the user to set system time
	parameters: character buffer from user containing new time
	returns: updates the system's time with the new time from the user
- setDate
	description: allows the user to set system date
	parameters: character buffer from user containing new date
	returns: updates the system's date with the new time from the user
- create PCB
	description: calls setupPCB() and inserts it into the appropriate queue
	parameters: process name, class, and priority
	returns: error if the command entered is invalid
- delete PCB
	description: deletes pcb and frees all associated memory
	parameter: process name
	returns: error if pcb name doesn’t exist
- block PCB
	description: puts PCB in a blocked state and re-inserts it to the appropriate queue
	parameter: process name
	returns: error if PCB is not found
- unblock PCB
	description: puts PCB in a unblocked state and re-inserts it to the appropriate queue
	parameter: process name
	returns: error if PCB is not found
- suspend PCB
	description: suspends PCB and re-inserts it to the appropriate queue
	parameter: process name
	returns: error if PCB is not found
- resume PCB
	description: changed the PCB to a non-suspended state and re-inserts it to the appropriate queue
	parameter: process name
	returns: error if PCB is not found
- set PCB priority
	description: changes PCB's priority and re-inserts it in the appropriate queue and position
	parameter: process name, new priority
	returns: error if PCB is not found or priority is outside 0-9
- show PCB
	description: displaies a PCB's name, state, class, status, and priority
	parameter: process name
	returns: error if PCB is not found
- show ready
	description: displays every PCB in the ready queue's name, state, class, status, and priority
	parameter: none
	returns: none
- show blocked
	description: displays every PCB in the blocked queue's name, state, class, status, and priority
	parameter: none
	returns: none
- show all
	description: displays every PCB in the ready and blocked queues' name, state, class, status, and priority
	parameter: none
	returns: none
- yield 
	description: yields CPU time to other processes
	parameter: none
	returns: none
- loadr3
	description: loads all R3 processes into the suspended ready queue
	parameter: none
	returns: pointer to a PCB
- initHeap
	description: initializes the size of memory for the MPX
	parameters: an integer argument that represents the amount of bytes in memory dedicated to the MPX
	returns: nothing, either prints error message or creates the heap
- allocateMem
	description: allocates memory from the heap for a structure
	parameters: an integer argument that represents the amount of bytes in memory dedicated to the structure
	returns: nothing, either prints error message or allocates memory to the structure
- freeMems
	description: frees a block of memory that was previously allocated
	parameters: a pointer to an address that points to an address in memory
	returns: nothing, either prints error message or frees memory from a structure
- isEmpty
	description: checks to see if the heap is empty
	parameters: none
	returns: an integer that represents whether the heap is empty or not
- showFree
	description: displays the amount of free memory available in the MPX
	parameters: none
	returns: nothing, prints out the list of free memory
- showAllocated
	description: displays the amount of allocated memory used in the MPX
	parameters: none
	returns: nothing, prints out the list of allocated memory
